name: create-release-upload

on: 
  push:
    tags:
    - 'v*'

jobs:
  create_releases:
    name: create-releases
    runs-on: ubuntu-18.04
    outputs:
      release_url: ${{ steps.output_url.outputs.upload_url }}

    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      shell: bash
    - name: check package.json version
      env:
        version: ${{ steps.get_version.outputs.VERSION }}
      run: python ./tools/version_checker.py ${version}
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Changes in this Release
          - First Change
          - Second Change
        draft: false
        prerelease: true
      continue-on-error: true
    - name: Get release
      if: steps.create_release.outcome == 'failure'
      id: get_release
      uses: bruceadams/get-release@v1.2.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: output url
      id: output_url
      run: |
        echo "::set-output name=upload_url::${{steps.get_release.outputs.upload_url}}${{steps.create_release.outputs.upload_url}}"

  upload-sdist:
    name: upload-sdist
    needs: create_releases
    timeout-minutes: 20
    runs-on: ubuntu-18.04

    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: output url
      id: get_url
      run: echo "::set-output name=upload_url::${{ needs.create_releases.outputs.release_url }}"
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      shell: bash
    - name: dump version
      env:
        version: ${{ steps.get_version.outputs.VERSION }}
      run: echo "version=${version}"
    - name: create sdist
      id: create_sdist
      run: |
        python setup.py sdist --formats=gztar,zip
        cd dist
        echo "::set-output name=sdist_tgz::$(ls *.tar.gz)"
        echo "::set-output name=sdist_zip::$(ls *.zip)"
    - name: Upload sdist for tgz
      id: upload-sdist-tgz
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_url.outputs.upload_url }}
        asset_path: ./dist/${{ steps.create_sdist.outputs.sdist_tgz }}
        asset_name: ${{ steps.create_sdist.outputs.sdist_tgz }}
        asset_content_type: application/zip
    - name: Upload sdist for zip
      id: upload-sdist-zip
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_url.outputs.upload_url }}
        asset_path: ./dist/${{ steps.create_sdist.outputs.sdist_zip }}
        asset_name: ${{ steps.create_sdist.outputs.sdist_zip }}
        asset_content_type: application/zip

  upload-wheel:
    name: upload-wheel
    needs: create_releases
    timeout-minutes: 20
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-10.15, windows-2019, ubuntu-18.04]
        include:
          - os: macos-10.15
            py-ver: 3.6
            pl-name: macosx_10_15_x86_64
          - os: ubuntu-18.04
            py-ver: 3.6
            pl-name: linux_x86_64
          - os: windows-2019
            py-ver: 3.8
            pl-name: win_amd64

    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.py-ver }}
    - name: output url
      id: get_url
      run: echo "::set-output name=upload_url::${{ needs.create_releases.outputs.release_url }}"
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}
      shell: bash
    - name: dump version
      env:
        version: ${{ steps.get_version.outputs.VERSION }}
      run: echo "version=${version}"
      shell: bash
    - name: install pip & wheel
      run: |
        python -m pip install -U pip
        pip install wheel
    - name: create wheel
      id: create_wheel
      run: |
        pip wheel .
        echo "::set-output name=wheel::$(ls *.whl)"
      shell: bash
    - name: Upload sdist for tgz
      id: upload-release-asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_url.outputs.upload_url }}
        asset_path: ./${{ steps.create_wheel.outputs.wheel }}
        asset_name: cfd-${{ steps.get_version.outputs.VERSION }}-py3-none-${{ matrix.pl-name }}.whl
        asset_content_type: application/zip
