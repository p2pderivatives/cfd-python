name: develop pre-merge check

on: 
  push:
    branches:
    - develop
    - test_ci
    paths-ignore:
    - '.github/workflows/create_release-and-upload.yml'
    - 'README.md'
  pull_request:
    branches:
    - develop
    - test_ci

env:
  GITHUB_VERSION: v0.0.5
  DOCKER_PYTHON_VERSION: 3.7
  GITHUB_DOCKER_IMAGE: docker.pkg.github.com/${{ github.repository_owner }}/elements-testing-dockerfile/elements-testing
  ENTRYPOINT_PATH: /github/workspace/.github/workflows/docker/test_entrypoint.sh

jobs:
  build-and-test:
    name: build & test
    timeout-minutes: 20
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-10.15, windows-2019, ubuntu-18.04]
        py-ver: [3.6, 3.7, 3.8, 3.9, pypy3]
        exclude:
          - os: windows-2019
            py-ver: pypy3

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.py-ver }}
    - name: Display Python version
      run: python -c "import sys; print(sys.version)"
    - name: build
      run: python setup.py build
    - name: copy dll
      if: runner.os == 'Windows' && (matrix.py-ver == '3.6' || matrix.py-ver == '3.7')
      run: |
        cp ./cmake_build/Release/*.dll ./cfd/
        echo "$GITHUB_WORKSPACE/cfd" >> $GITHUB_PATH
      shell: bash
    - name: test
      run: python -m unittest discover -v tests

  pip-test:
    name: pip test
    timeout-minutes: 20
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-10.15, macos-11.0, windows-2019, ubuntu-18.04, ubuntu-20.04]
        py-ver: [3.6, 3.7, 3.8, 3.9, pypy3]
        exclude:
          - os: windows-2019
            py-ver: 3.6
          - os: windows-2019
            py-ver: 3.7
          - os: windows-2019
            py-ver: pypy3
          - os: macos-11.0
            py-ver: pypy3

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.py-ver }}
    - name: Display Python version
      run: python -c "import sys; print(sys.version)"
    - name: install pip
      run: python -m pip install -U pip
    - name: install
      run: pip install --user .
    - name: dump info
      run: pip show cfd
    - name: call example
      run: python ./tools/example.py

  e2e-test:
    timeout-minutes: 20
    name: e2e-test
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.DOCKER_PYTHON_VERSION }}
    - name: Display Python version
      run: python -c "import sys; print(sys.version)"
    - name: install pip
      run: python -m pip install -U pip
    - name: create wheel
      run: pip wheel .
    - name: e2e-test
      run: |
        docker login docker.pkg.github.com -u owner -p ${{ secrets.GITHUB_TOKEN }}
        docker pull ${{ env.GITHUB_DOCKER_IMAGE }}:${{ env.GITHUB_VERSION }}
        docker run -v ${{ github.workspace }}:/github/workspace --entrypoint ${{ env.ENTRYPOINT_PATH }} ${{ env.GITHUB_DOCKER_IMAGE }}:${{ env.GITHUB_VERSION }}

  doxygen-ubuntu:
    name: doxygen-ubuntu
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: install_doxygen
      run: sudo apt install doxygen graphviz
    - name: doxygen_check
      run: |
        cd doc
        doxygen Doxyfile_quiet_all
